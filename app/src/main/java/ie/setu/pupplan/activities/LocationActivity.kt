package ie.setu.pupplan.activities

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import com.google.android.material.snackbar.Snackbar
import ie.setu.pupplan.R
import ie.setu.pupplan.models.LocationModel
import ie.setu.pupplan.databinding.ActivityLocationBinding
import ie.setu.pupplan.main.MainApp
import timber.log.Timber.i

class LocationActivity : AppCompatActivity() {

//    View Binding initiated to link module to layout file activity_location.xml
//    ActivityLocationBinding is autogenerated class that just needs to be imported, as binding is switched on in build.gradle
    private lateinit var binding: ActivityLocationBinding

//    bring in data model
    var location = LocationModel()
//reference to the main app object (lateinit overrules null safety checks)
    lateinit var app : MainApp

//    main function
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
//     inflater takes an XML file as input and builds the View objects from it
        binding = ActivityLocationBinding.inflate(layoutInflater)
        setContentView(binding.root)
//    enable the toolbar
        binding.toolbarAdd.title = title
        setSupportActionBar(binding.toolbarAdd)

//initialising the main class
        app = application as MainApp
        i("Location Activity started...")

//retrieve the placemark which was passed into the onlocationclick method in listactivity
        if (intent.hasExtra("location_edit")) {
            location = intent.extras?.getParcelable("location_edit")!!
            binding.locationTitle.setText(location.title)
            binding.locationDescription.setText(location.description)
        }

        binding.btnAdd.setOnClickListener(){
            location.title = binding.locationTitle.text.toString()
            location.description = binding.locationDescription.text.toString()
            if (location.title.isNotEmpty()) {
                app.locations.create(location.copy())
                setResult(RESULT_OK)
                finish()
            }
            else {
                Snackbar
                    .make(it, "Please Enter a title", Snackbar.LENGTH_LONG)
                    .show()
            }
        }
    }

    // inflate the menu:
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_location, menu)
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.item_cancel -> {
                finish()
            }
        }
        return super.onOptionsItemSelected(item)
    }
}