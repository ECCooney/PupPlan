package ie.setu.pupplan.activities

import android.content.Intent
import android.net.Uri
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import com.google.android.material.snackbar.Snackbar
import com.squareup.picasso.Picasso
import ie.setu.pupplan.R
import ie.setu.pupplan.models.LocationModel
import ie.setu.pupplan.databinding.ActivityLocationBinding
import ie.setu.pupplan.helpers.showImagePicker
import ie.setu.pupplan.main.MainApp
import ie.setu.pupplan.models.Address
import timber.log.Timber.i

class LocationActivity : AppCompatActivity() {

//    View Binding initiated to link module to layout file activity_location.xml
//    ActivityLocationBinding is autogenerated class that just needs to be imported, as binding is switched on in build.gradle
    private lateinit var binding: ActivityLocationBinding
    //this gets passed to the showImagePicker function
    private lateinit var imageIntentLauncher : ActivityResultLauncher<Intent>
    private lateinit var mapIntentLauncher : ActivityResultLauncher<Intent>
//    bring in data model
    var location = LocationModel()
//reference to the main app object (lateinit overrules null safety checks)
    lateinit var app : MainApp
//    var address = Address(52.245696, -7.139102, 15f)

    override fun onCreate(savedInstanceState: Bundle?) {

    super.onCreate(savedInstanceState)
//     inflater takes an XML file as input and builds the View objects from it
        binding = ActivityLocationBinding.inflate(layoutInflater)
        setContentView(binding.root)
//    enable the toolbar
        binding.toolbarAdd.title = title
        setSupportActionBar(binding.toolbarAdd)
//initialising the main class
        app = application as MainApp
        i("Location Activity started...")

        var edit = false

//retrieve the location which was passed into the onlocationclick method in listactivity
        if (intent.hasExtra("location_edit")) {
            edit = true
            location = intent.extras?.getParcelable("location_edit")!!
            binding.locationTitle.setText(location.title)
            binding.locationDescription.setText(location.description)
            binding.locationCategory.setText(location.locationCategory)

            binding.btnAdd.setText(R.string.save_location)
            Picasso.get()
                .load(location.image)
                .into(binding.locationImage)
            if (location.image != Uri.EMPTY) {
                binding.chooseImage.setText(R.string.change_location_image)
            }
        }

        binding.btnAdd.setOnClickListener(){
            location.title = binding.locationTitle.text.toString()
            location.description = binding.locationDescription.text.toString()
            location.locationCategory = binding.locationCategory.text.toString()
            if (location.title.isEmpty()) {
                Snackbar
                    .make(it, R.string.enter_location_title, Snackbar.LENGTH_LONG)
                    .show()
            }
            else {
                if (edit) {
                    app.locations.update(location.copy())
                }
                else{
                    app.locations.create(location.copy())
                }

            }
            setResult(RESULT_OK)
            finish()
        }
        binding.chooseImage.setOnClickListener(){
    //showImagePicker coming from helpers
            showImagePicker(imageIntentLauncher)
            i("Select image") }

        registerImagePickerCallback()

        binding.locationAddress.setOnClickListener {
            val address = Address(52.245696, -7.139102, 15f)
            if (location.zoom != 0f) {
                address.lat =  location.lat
                address.lng = location.lng
                address.zoom = location.zoom
            }
            val launcherIntent = Intent(this, MapActivity::class.java)
                .putExtra("address", address)
            mapIntentLauncher.launch(launcherIntent)
        }

        registerMapCallback()

    }

    // inflate the menu:
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_location, menu)
        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.item_cancel -> {
                finish()
            }
        }
        return super.onOptionsItemSelected(item)
    }
//result from the showImagePicker function (the image uri) gets processed in this callback

    private fun registerImagePickerCallback() {
        imageIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            { result ->
                when(result.resultCode){
                    RESULT_OK -> {
                        if (result.data != null) {
                            i("Got Result ${result.data!!.data}")
                            location.image = result.data!!.data!!
                            Picasso.get()
                                .load(location.image)
                                .into(binding.locationImage)
                            binding.chooseImage.setText(R.string.change_location_image)
                        } // end of if
                    }
                    RESULT_CANCELED -> { } else -> { }
                }
            }
    }

    private fun registerMapCallback() {
        mapIntentLauncher =
            registerForActivityResult(ActivityResultContracts.StartActivityForResult())
            { result ->
                when (result.resultCode) {
                    RESULT_OK -> {
                        if (result.data != null) {
                            i("Got Address ${result.data.toString()}")
                            val address = result.data!!.extras?.getParcelable<Address>("address")!!
                            i("Address == $address")
                            location.lat = address.lat
                            location.lng = address.lng
                            location.zoom = address.zoom
                        } // end of if
                    }
                    RESULT_CANCELED -> { } else -> { }
                }
            }
    }
}